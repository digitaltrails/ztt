from django.core.management.base import BaseCommand
from worktracking.models import Line, LineType

class Command(BaseCommand):
    help = 'Populates the Line model with actual station data'

    def handle(self, *args, **options):
        # Define the line data with actual station information
        line_data = [
            ("10m line", "01", "28"),
            ("50m line", "01", "17"),
            ("A", "01", "10"),
            ("aa", "01", "07"),
            ("AAA", "01", "04"),
            ("AB", "01", "13"),
            ("B", "01", "19"),
            ("bb", "02", "11"),
            ("BC", "01", "25"),
            ("C", "01", "26"),
            ("cc", "01", "19"),
            ("CD", "01", "28"),
            ("D", "01", "27"),
            ("dd", "01", "25"),
            ("DE east", "01", "28"),
            ("DE west", "29", "30"),
            ("E east", "01", "26"),
            ("E west", "27", "28"),
            ("ee", "01", "28"),
            ("EF east", "01", "25"),
            ("EF west", "26", "29"),
            ("F east", "01", "25"),
            ("F west", "26", "30"),
            ("ff", "01", "28"),
            ("FG east", "01", "23"),
            ("FG west", "24", "31"),
            ("G east", "01", "23"),
            ("G west", "24", "32"),
            ("gg", "01", "28"),
            ("GH east", "01", "22"),
            ("GH west", "23", "33"),
            ("H east", "01", "23"),
            ("H west", "24", "35"),
            ("hh", "01", "26"),
            ("HI east", "01", "25"),
            ("HI west", "26", "36"),
            ("I east", "01", "25"),
            ("I west", "26", "37"),
            ("ii", "01", "10"),
            ("IIJ", "01", "09"),
            ("IJ east", "01", "28"),
            ("IJ west", "29", "37"),
            ("J east", "01", "36"),
            ("J west", "37", "50"),
            ("jj", "01", "07"),
            ("JK east", "01", "37"),
            ("JK west", "38", "53"),
            ("K east", "01", "38"),
            ("K west", "39", "53"),
            ("kk", "01", "04"),
            ("KL east", "01", "36"),
            ("KL west", "37", "51"),
            ("L east", "01", "37"),
            ("L west", "38", "50"),
            ("LE", "01", "25"),
            ("LM east", "01", "36"),
            ("LM west", "37", "50"),
            ("M east", "01", "35"),
            ("M west", "36", "49"),
            ("MN east", "01", "35"),
            ("MN west", "36", "45"),
            ("Mouseline", "", ""),
            ("N east", "01", "34"),
            ("N west", "35", "46"),
            ("NO east", "01", "35"),
            ("NO west", "36", "48"),
            ("O east", "01", "34"),
            ("O west", "35", "47"),
            ("OP east", "01", "34"),
            ("OP west", "35", "46"),
            ("P east", "01", "32"),
            ("P west", "33", "45"),
            ("PQ east", "01", "32"),
            ("PQ west", "33", "46"),
            ("Q east", "01", "32"),
            ("Q west", "33", "47"),
            ("QR east", "01", "34"),
            ("QR west", "35", "49"),
            ("R east", "01", "33"),
            ("R west", "34", "51"),
            ("RS east", "01", "28"),
            ("RS west", "29", "45"),
            ("S east", "01", "25"),
            ("S west", "26", "44"),
            ("ST east", "01", "23"),
            ("ST west", "24", "39"),
            ("T east", "01", "18"),
            ("T west", "19", "35"),
            ("TU east", "01", "21"),
            ("TU west", "22", "37"),
            ("U east", "01", "23"),
            ("U west", "24", "39"),
            ("UV east", "01", "22"),
            ("UV west", "23", "37"),
            ("V east", "01", "20"),
            ("V west", "21", "33"),
            ("VW east", "01", "19"),
            ("VW west", "20", "32"),
            ("W east", "01", "16"),
            ("W west", "17", "24"),
            ("WX east", "01", "14"),
            ("WX west", "15", "20"),
            ("X east", "01", "13"),
            ("X west", "14", "20"),
            ("XY east", "01", "11"),
            ("XY west", "12", "18"),
            ("Y east", "01", "11"),
            ("Y west", "12", "19"),
            ("YZ east", "01", "10"),
            ("YZ west", "11", "17"),
            ("Z east", "01", "07"),
            ("Z west", "08", "15"),
            ("ZA", "01", "03"),
            ("ZZ", "01", "06"),
        ]

        # Create lines with actual station data
        for name, start_station, end_station in line_data:
            # Determine line type
            if "Mouseline" in name:
                line_type = LineType.MOUSELINE
            else:
                line_type = LineType.TRANSECT
                
            Line.objects.get_or_create(
                name=name,
                defaults={
                    'line_type': line_type,
                    'start_station_id': start_station,
                    'end_station_id': end_station
                }
            )
            self.stdout.write(self.style.SUCCESS(f'Created line {name}'))

        self.stdout.write(self.style.SUCCESS('Successfully populated all lines with actual station data'))
